const rateLimits = new Map();

/**
 * üõ°Ô∏è Sistema de Rate Limiting para Broadcasts
 * Previene spam y uso abusivo del sistema de anuncios
 */
class BroadcastRateLimit {
  constructor() {
    this.limits = {
      // L√≠mites por usuario
      USER_HOURLY: { max: 3, window: 60 * 60 * 1000 }, // 3 por hora
      USER_DAILY: { max: 10, window: 24 * 60 * 60 * 1000 }, // 10 por d√≠a
      
      // L√≠mites globales del sistema
      GLOBAL_HOURLY: { max: 20, window: 60 * 60 * 1000 }, // 20 por hora total
      GLOBAL_DAILY: { max: 50, window: 24 * 60 * 60 * 1000 }, // 50 por d√≠a total
      
      // Cooldown entre broadcasts del mismo usuario
      USER_COOLDOWN: { window: 5 * 60 * 1000 } // 5 minutos entre broadcasts
    };
  }

  /**
   * üîç Verificar si un usuario puede ejecutar un broadcast
   * @param {string} userId - ID del usuario
   * @returns {Object} - Resultado de la verificaci√≥n
   */
  checkUserLimit(userId) {
    const now = Date.now();
    
    // üîÑ Limpiar registros expirados
    this.cleanExpiredRecords();
    
    // üìä Obtener registros del usuario
    const userKey = `user_${userId}`;
    const userRecords = rateLimits.get(userKey) || { hourly: [], daily: [], lastBroadcast: 0 };
    
    // ‚è±Ô∏è Verificar cooldown
    const timeSinceLastBroadcast = now - userRecords.lastBroadcast;
    if (timeSinceLastBroadcast < this.limits.USER_COOLDOWN.window) {
      const remainingTime = Math.ceil((this.limits.USER_COOLDOWN.window - timeSinceLastBroadcast) / 1000 / 60);
      return {
        allowed: false,
        reason: 'COOLDOWN',
        message: `‚è±Ô∏è Debes esperar ${remainingTime} minutos entre broadcasts.`,
        retryAfter: remainingTime * 60
      };
    }
    
    // üìä Verificar l√≠mite horario del usuario
    const hourlyCount = userRecords.hourly.filter(
      timestamp => now - timestamp < this.limits.USER_HOURLY.window
    ).length;
    
    if (hourlyCount >= this.limits.USER_HOURLY.max) {
      const oldestRecord = Math.min(...userRecords.hourly);
      const resetTime = Math.ceil((this.limits.USER_HOURLY.window - (now - oldestRecord)) / 1000 / 60);
      return {
        allowed: false,
        reason: 'USER_HOURLY',
        message: `üìä Has alcanzado el l√≠mite de ${this.limits.USER_HOURLY.max} broadcasts por hora. Reinicia en ${resetTime} minutos.`,
        retryAfter: resetTime * 60
      };
    }
    
    // üìä Verificar l√≠mite diario del usuario
    const dailyCount = userRecords.daily.filter(
      timestamp => now - timestamp < this.limits.USER_DAILY.window
    ).length;
    
    if (dailyCount >= this.limits.USER_DAILY.max) {
      return {
        allowed: false,
        reason: 'USER_DAILY',
        message: `üìÖ Has alcanzado el l√≠mite de ${this.limits.USER_DAILY.max} broadcasts por d√≠a. Reinicia ma√±ana.`,
        retryAfter: 24 * 60 * 60
      };
    }
    
    // üåê Verificar l√≠mites globales
    const globalCheck = this.checkGlobalLimit();
    if (!globalCheck.allowed) {
      return globalCheck;
    }
    
    return { allowed: true };
  }

  /**
   * üåê Verificar l√≠mites globales del sistema
   * @returns {Object} - Resultado de la verificaci√≥n global
   */
  checkGlobalLimit() {
    const now = Date.now();
    const globalRecords = rateLimits.get('global') || { hourly: [], daily: [] };
    
    // üìä Verificar l√≠mite horario global
    const globalHourlyCount = globalRecords.hourly.filter(
      timestamp => now - timestamp < this.limits.GLOBAL_HOURLY.window
    ).length;
    
    if (globalHourlyCount >= this.limits.GLOBAL_HOURLY.max) {
      return {
        allowed: false,
        reason: 'GLOBAL_HOURLY',
        message: `üåê El sistema ha alcanzado el l√≠mite de ${this.limits.GLOBAL_HOURLY.max} broadcasts por hora. Intenta m√°s tarde.`,
        retryAfter: 60 * 60
      };
    }
    
    // üìä Verificar l√≠mite diario global
    const globalDailyCount = globalRecords.daily.filter(
      timestamp => now - timestamp < this.limits.GLOBAL_DAILY.window
    ).length;
    
    if (globalDailyCount >= this.limits.GLOBAL_DAILY.max) {
      return {
        allowed: false,
        reason: 'GLOBAL_DAILY',
        message: `üåê El sistema ha alcanzado el l√≠mite de ${this.limits.GLOBAL_DAILY.max} broadcasts por d√≠a.`,
        retryAfter: 24 * 60 * 60
      };
    }
    
    return { allowed: true };
  }

  /**
   * ‚úÖ Registrar un broadcast exitoso
   * @param {string} userId - ID del usuario
   */
  recordBroadcast(userId) {
    const now = Date.now();
    
    // üìù Registrar para el usuario
    const userKey = `user_${userId}`;
    const userRecords = rateLimits.get(userKey) || { hourly: [], daily: [], lastBroadcast: 0 };
    
    userRecords.hourly.push(now);
    userRecords.daily.push(now);
    userRecords.lastBroadcast = now;
    
    // üßπ Limpiar registros antiguos del usuario
    userRecords.hourly = userRecords.hourly.filter(
      timestamp => now - timestamp < this.limits.USER_HOURLY.window
    );
    userRecords.daily = userRecords.daily.filter(
      timestamp => now - timestamp < this.limits.USER_DAILY.window
    );
    
    rateLimits.set(userKey, userRecords);
    
    // üìù Registrar globalmente
    const globalRecords = rateLimits.get('global') || { hourly: [], daily: [] };
    globalRecords.hourly.push(now);
    globalRecords.daily.push(now);
    
    // üßπ Limpiar registros antiguos globales
    globalRecords.hourly = globalRecords.hourly.filter(
      timestamp => now - timestamp < this.limits.GLOBAL_HOURLY.window
    );
    globalRecords.daily = globalRecords.daily.filter(
      timestamp => now - timestamp < this.limits.GLOBAL_DAILY.window
    );
    
    rateLimits.set('global', globalRecords);
    
    console.log(`üìä [RATE_LIMIT] Broadcast registrado para usuario ${userId}`);
  }

  /**
   * üìä Obtener estad√≠sticas de uso actual
   * @param {string} userId - ID del usuario (opcional)
   * @returns {Object} - Estad√≠sticas actuales
   */
  getUsageStats(userId = null) {
    const now = Date.now();
    this.cleanExpiredRecords();
    
    const stats = {
      global: {
        hourly: 0,
        daily: 0,
        maxHourly: this.limits.GLOBAL_HOURLY.max,
        maxDaily: this.limits.GLOBAL_DAILY.max
      }
    };
    
    // üìä Estad√≠sticas globales
    const globalRecords = rateLimits.get('global') || { hourly: [], daily: [] };
    stats.global.hourly = globalRecords.hourly.filter(
      timestamp => now - timestamp < this.limits.GLOBAL_HOURLY.window
    ).length;
    stats.global.daily = globalRecords.daily.filter(
      timestamp => now - timestamp < this.limits.GLOBAL_DAILY.window
    ).length;
    
    // üìä Estad√≠sticas del usuario espec√≠fico
    if (userId) {
      const userKey = `user_${userId}`;
      const userRecords = rateLimits.get(userKey) || { hourly: [], daily: [], lastBroadcast: 0 };
      
      stats.user = {
        hourly: userRecords.hourly.filter(
          timestamp => now - timestamp < this.limits.USER_HOURLY.window
        ).length,
        daily: userRecords.daily.filter(
          timestamp => now - timestamp < this.limits.USER_DAILY.window
        ).length,
        maxHourly: this.limits.USER_HOURLY.max,
        maxDaily: this.limits.USER_DAILY.max,
        lastBroadcast: userRecords.lastBroadcast,
        cooldownRemaining: Math.max(0, this.limits.USER_COOLDOWN.window - (now - userRecords.lastBroadcast))
      };
    }
    
    return stats;
  }

  /**
   * üßπ Limpiar registros expirados para optimizar memoria
   */
  cleanExpiredRecords() {
    const now = Date.now();
    const maxWindow = Math.max(
      this.limits.USER_DAILY.window,
      this.limits.GLOBAL_DAILY.window
    );
    
    for (const [key, records] of rateLimits.entries()) {
      if (key === 'global') {
        // Limpiar registros globales
        if (records.hourly) {
          records.hourly = records.hourly.filter(
            timestamp => now - timestamp < this.limits.GLOBAL_HOURLY.window
          );
        }
        if (records.daily) {
          records.daily = records.daily.filter(
            timestamp => now - timestamp < this.limits.GLOBAL_DAILY.window
          );
        }
      } else if (key.startsWith('user_')) {
        // Limpiar registros de usuario
        if (records.hourly) {
          records.hourly = records.hourly.filter(
            timestamp => now - timestamp < this.limits.USER_HOURLY.window
          );
        }
        if (records.daily) {
          records.daily = records.daily.filter(
            timestamp => now - timestamp < this.limits.USER_DAILY.window
          );
        }
        
        // Eliminar usuario si no tiene registros recientes
        if ((!records.hourly || records.hourly.length === 0) &&
            (!records.daily || records.daily.length === 0) &&
            now - records.lastBroadcast > maxWindow) {
          rateLimits.delete(key);
        }
      }
    }
  }

  /**
   * üîí Verificar si un usuario es propietario (sin l√≠mites)
   * @param {string} userId - ID del usuario
   * @returns {boolean} - Es propietario o no
   */
  isOwner(userId) {
    const botOwners = process.env.BOT_OWNERS ? 
      process.env.BOT_OWNERS.split(',').map(id => id.trim()) : 
      [];
    return botOwners.includes(userId);
  }

  /**
   * üöÄ Verificaci√≥n completa antes de broadcast
   * @param {string} userId - ID del usuario
   * @returns {Object} - Resultado completo de verificaci√≥n
   */
  verifyBroadcastPermission(userId) {
    // üîí Los propietarios no tienen l√≠mites
    if (this.isOwner(userId)) {
      return { 
        allowed: true, 
        reason: 'OWNER',
        message: 'üîí Usuario propietario - Sin l√≠mites'
      };
    }
    
    return this.checkUserLimit(userId);
  }
}

// üè≠ Exportar instancia singleton
const broadcastRateLimit = new BroadcastRateLimit();

// üßπ Limpiar registros cada 30 minutos
setInterval(() => {
  broadcastRateLimit.cleanExpiredRecords();
  console.log('üßπ [RATE_LIMIT] Registros expirados limpiados');
}, 30 * 60 * 1000);

module.exports = broadcastRateLimit;
